preorder = rootซ้ายขวา
inorder = ซ้าย rootขวา
postorder = ซ้ายขวาroot 
root= ตัวบนสุดของโหนด
left = ซ้าย
right = ขวา
insert = แทรก
inorderTraversal = พื่อเรียงคะแนนจากน้อยไปมาก
append() เป็นเมธอดของ list ที่ใช้ เพิ่มค่าเข้าไปที่ท้ายของลิสต์ โดย ไม่ต้องระบุตำแหน่ง

ผมจะมาอธิบายฟังก์ชันinfixToPostfix(infixText): เราจะรับค่าพารามิเตอร์เป็นA + B * Cแล้วแปลงเป็น Postfixก็จะได้ ABC*+
ในส่วนOPERATORSจะเป็นตัวดำเนิดการเก็บค่าพวก+-*/
ส่่วน PRIORITY ไพร-ออ-ริ-ทิ จะเป็นการจัดเรียงลำดับตัวดำเนิดการนะครับ ส่วนoutput จะเป็นการเก็บตัวดำเนิดการPostfixและstackใช้Circular Doubly Linked Listเซอร์-คิว-ลาร์ ดับ-ลี่ ลิงค์-ด ลิสต์
ให้ทำการวนรอบผ่านนิพจน์ ถ้าเป็นOperandออ-เปอ-แอนด์ ไม่ใช่ตัวดำเนิดการให้แสดงลงไปใน output ถ้าวงเล็บเปิด ให้ทำการเพิ่มลงไปในstack ถ้าวงเล็บปิดให้ดึงตัวดำเนิดการจาก stackไปจนถึงวงเล็บเปิด
ถ้าเป็นตัวดำเนิดการให้เปรียบเทียบและดำเนิดการใน stack ตามความสำคัญและเหมาะสมจากนั้นดึงตัวดำเนิดการที่เหลือหลังจากอ่านนิพจน์เสร็จสิ้น, ดึงตัวดำเนินการที่เหลือใน stack และเพิ่มไปยัง output.
ผลลัพธ์:คืนค่าเป็น Postfix Expression.

OPERATORS: เก็บตัวดำเนินการทั้งหมดที่ใช้ในนิพจน์ ทางคณิต
PRIORITY: เก็บลำดับความสำคัญของตัวดำเนินการที่ใช้ในคำนวณ เช่น + และ - เป็นต้น
output ตัวแปรเก็บเป็นลิส ที่จะได้จากการแปลงนิพจน์จาก Infix เป็น Postfix
stack: ใช้ Circular Doubly Linked List เพื่อเก็บตัวดำเนินการที่อยู่ระหว่างการคำนวณ (ช่วยให้จัดการกับลำดับตัวดำเนินการ
for ch in infixText:
วนรอบไปที่แต่ละตัวในนิพจน์ที่รับมา infixText